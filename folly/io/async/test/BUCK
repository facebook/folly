# @fb-only[end= ]: load("@fbcode//folly/io/async/test/certs:defs.bzl", "alias_pem")
load("@shim//folly/io/async/test/certs:defs.bzl", "alias_pem") # @oss-only

load("@fbcode_macros//build_defs:build_file_migration.bzl", "fbcode_target", "non_fbcode_target")
load("@fbcode_macros//build_defs:cpp_benchmark.bzl", "cpp_benchmark")
load("@fbcode_macros//build_defs:cpp_binary.bzl", "cpp_binary")
load("@fbcode_macros//build_defs:cpp_library.bzl", "cpp_library")
load("@fbcode_macros//build_defs:cpp_unittest.bzl", "cpp_unittest")
load("@fbsource//xplat/folly:defs.bzl", "folly_xplat_cxx_binary", "folly_xplat_cxx_library", "folly_xplat_cxx_test")
load("@fbsource//xplat/pfh/triage_InfrastructureSupermoduleOptou:DEFS.bzl", "triage_InfrastructureSupermoduleOptou")

oncall("fbcode_entropy_wardens_folly")

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "test_ssl_server",
    srcs = [
        "TestSSLServer.cpp",
    ],
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = [
        "TestSSLServer.h",
    ],
    resources = {
        "certs/ca-cert.pem": "//xplat/folly/io/async/test/certs:ca-cert.pem",
        "certs/client_ca_cert.pem": "//xplat/folly/io/async/test/certs:client_ca_cert.pem",
        "certs/client_cert.pem": "//xplat/folly/io/async/test/certs:client_cert.pem",
        "certs/client_chain.pem": "//xplat/folly/io/async/test/certs:client_chain.pem",
        "certs/client_key.pem": "//xplat/folly/io/async/test/certs:client_key.pem",
        "certs/tests-cert.pem": "//xplat/folly/io/async/test/certs:tests-cert.pem",
        "certs/tests-key.pem": "//xplat/folly/io/async/test/certs:tests-key.pem",
    },
    deps = [
        "//xplat/folly:portability_openssl",
    ],
    exported_deps = [
        ":callback_state_enum",
        "//xplat/folly:experimental_test_util",
        "//xplat/folly:network_address",
        "//xplat/folly:portability_gtest",
        "//xplat/folly:portability_sockets",
        "//xplat/folly:portability_unistd",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:async_socket",
        "//xplat/folly/io/async:async_ssl_socket",
        "//xplat/folly/io/async:async_transport",
        "//xplat/folly/io/async:server_socket",
        "//xplat/folly/io/async/ssl:ssl_errors",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "tfo_util",
    srcs = [
        "TFOUtil.cpp",
    ],
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = [
        "TFOUtil.h",
    ],
    deps = [
        "//xplat/folly/detail:socket_fast_open",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "async_signal_handler_test_lib",
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = [
        "AsyncSignalHandlerTestLib.h",
    ],
    exported_deps = [
        ":util",
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:async_signal_handler",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "async_pipe_test",
    srcs = ["AsyncPipeTest.cpp"],
    raw_headers = [],
    supports_static_listing = False,
    deps = [
        "//xplat/folly:memory",
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:async_pipe",
        "//xplat/folly/io/async:async_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "async_ssl_socket_test_lib",
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = [
        "AsyncSSLSocketTest.h",
    ],
    exported_deps = [
        ":test_ssl_server",
        "//xplat/folly:exception_wrapper",
        "//xplat/folly:experimental_test_util",
        "//xplat/folly:io_socket_option_map",
        "//xplat/folly:network_address",
        "//xplat/folly:portability_gmock",
        "//xplat/folly:portability_gtest",
        "//xplat/folly:portability_pthread",
        "//xplat/folly:portability_sockets",
        "//xplat/folly:portability_string",
        "//xplat/folly:portability_unistd",
        "//xplat/folly/fibers:fiber_manager_map",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:async_socket",
        "//xplat/folly/io/async:async_ssl_socket",
        "//xplat/folly/io/async:async_transport",
        "//xplat/folly/io/async:server_socket",
        "//xplat/folly/io/async/ssl:ssl_errors",
        "//xplat/folly/net:network_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "async_ssl_socket_test",
    srcs = [
        "AsyncSSLSocketTest.cpp",
        "AsyncSSLSocketTest2.cpp",
    ],
    contacts = ["oncall+secure_pipes@xmail.facebook.com"],
    resources = {
        "certs/ca-cert.pem": "//xplat/folly/io/async/test/certs:ca-cert.pem",
        "certs/client_ca_cert.pem": "//xplat/folly/io/async/test/certs:client_ca_cert.pem",
        "certs/client_cert.pem": "//xplat/folly/io/async/test/certs:client_cert.pem",
        "certs/client_key.pem": "//xplat/folly/io/async/test/certs:client_key.pem",
        "certs/tests-cert.pem": "//xplat/folly/io/async/test/certs:tests-cert.pem",
        "certs/tests-key.pem": "//xplat/folly/io/async/test/certs:tests-key.pem",
    },
    deps = [
        "fbsource//xplat/folly/io:iobuf",
        ":async_ssl_socket_test_lib",
        ":blocking_socket",
        ":mocks",
        ":test_ssl_server",
        ":tfo_util",
        "//xplat/folly:exception_wrapper",
        "//xplat/folly:futures_core",
        "//xplat/folly:init_init",
        "//xplat/folly:io_socket_option_map",
        "//xplat/folly:portability_gmock",
        "//xplat/folly:portability_gtest",
        "//xplat/folly:portability_openssl",
        "//xplat/folly:portability_pthread",
        "//xplat/folly:portability_sockets",
        "//xplat/folly:portability_string",
        "//xplat/folly:portability_unistd",
        "//xplat/folly:string",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:async_pipe",
        "//xplat/folly/io/async:async_socket",
        "//xplat/folly/io/async:async_socket_exception",
        "//xplat/folly/io/async:async_ssl_socket",
        "//xplat/folly/io/async:async_transport",
        "//xplat/folly/io/async:event_base_thread",
        "//xplat/folly/io/async:scoped_event_base_thread",
        "//xplat/folly/io/async:ssl_context",
        "//xplat/folly/io/async:ssl_options",
        "//xplat/folly/io/async/ssl:basic_transport_certificate",
        "//xplat/folly/io/async/ssl:openssl_transport_certificate",
        "//xplat/folly/io/async/ssl:ssl_errors",
        "//xplat/folly/net:net_ops",
        "//xplat/folly/net:network_socket",
        "//xplat/folly/net/test:mock_net_ops_dispatcher",
        "//xplat/third-party/openssl:crypto",
        "//xplat/third-party/openssl:ssl",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "async_ssl_socket_write_test",
    srcs = [
        "AsyncSSLSocketWriteTest.cpp",
    ],
    contacts = ["oncall+secure_pipes@xmail.facebook.com"],
    deps = [
        "fbsource//xplat/folly/io:iobuf",
        "//xplat/folly:portability_gmock",
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:async_socket",
        "//xplat/folly/io/async:async_ssl_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "async_socket_exception_test",
    srcs = [
        "AsyncSocketExceptionTest.cpp",
    ],
    contacts = ["oncall+secure_pipes@xmail.facebook.com"],
    deps = [
        "//xplat/folly:conv",
        "//xplat/folly:portability_gtest",
        "//xplat/folly:portability_openssl",
        "//xplat/folly/io/async:async_socket_exception",
        "//xplat/folly/io/async:ssl_context",
        "//xplat/folly/io/async/ssl:ssl_errors",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "async_socket_observer_test",
    srcs = [
        "AsyncSocketObserverTest.cpp",
    ],
    deps = [
        ":async_socket_test_lib",
        ":mocks",
        "//xplat/folly:portability_gmock",
        "//xplat/folly:portability_gtest",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "async_socket_test_lib",
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = [
        "AsyncSocketTest.h",
        "AsyncSocketTest2.h",
    ],
    exported_deps = [
        ":blocking_socket",
        ":callback_state_enum",
        ":conn_callback",
        "//xplat/folly:portability_sockets",
        "//xplat/folly:synchronization_rw_spin_lock",
        "//xplat/folly/io/async:async_socket",
        "//xplat/folly/io/async:server_socket",
        "//xplat/folly/net:net_ops",
        "//xplat/folly/net:network_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "async_socket_test",
    srcs = [
        "AsyncSocketTest.cpp",
        # Disabled until we have folly/test:socket_address_test_helper
        "AsyncSocketTest2.cpp",
    ],
    deps = [
        "fbsource//xplat/folly/io:iobuf",
        ":async_socket_test_lib",
        ":blocking_socket",
        ":conn_callback",
        ":mocks",
        ":tfo_util",
        ":util",
        "//xplat/folly:exception_wrapper",
        "//xplat/folly:experimental_test_util",
        "//xplat/folly:io_socket_option_map",
        "//xplat/folly:network_address",
        "//xplat/folly:portability_gmock",
        "//xplat/folly:portability_gtest",
        "//xplat/folly:portability_sockets",
        "//xplat/folly:portability_unistd",
        "//xplat/folly:random",
        "//xplat/folly:synchronization_baton",
        "//xplat/folly:synchronization_rw_spin_lock",
        "//xplat/folly:test_socket_address_test_helper",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:async_socket",
        "//xplat/folly/io/async:scoped_event_base_thread",
        "//xplat/folly/io/async:server_socket",
        "//xplat/folly/net:net_ops",
        "//xplat/folly/net:network_socket",
        "//xplat/folly/net/test:mock_net_ops_dispatcher",
        "//xplat/folly/net/test:mock_tcpinfo_dispatcher",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "async_transport_test",
    srcs = [
        "AsyncTransportTest.cpp",
    ],
    deps = [
        ":mocks",
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:async_socket",
        "//xplat/folly/io/async:async_transport",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "event_handler_test",
    srcs = [
        "EventHandlerTest.cpp",
    ],
    deps = [
        "//xplat/folly:mpmc_queue",
        "//xplat/folly:portability_gmock",
        "//xplat/folly:portability_gtest",
        "//xplat/folly:portability_sockets",
        "//xplat/folly:scope_guard",
        "//xplat/folly/io/async:async_base",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "async_timeout_test",
    srcs = ["AsyncTimeoutTest.cpp"],
    contacts = ["oncall+thrift@xmail.facebook.com"],
    raw_headers = [],
    deps = [
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:async_base",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "async_udp_socket_test",
    srcs = [
        # "AsyncUDPSocketTest.cpp",
    ],
    contacts = ["oncall+thrift@xmail.facebook.com"],
    raw_headers = [],
    deps = [
        "fbsource//xplat/folly/io:iobuf",
        "//xplat/folly:conv",
        "//xplat/folly:experimental_test_util",
        "//xplat/folly:io_socket_option_map",
        "//xplat/folly:network_address",
        "//xplat/folly:portability_gmock",
        "//xplat/folly:portability_gtest",
        "//xplat/folly:portability_sockets",
        "//xplat/folly:string",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:async_udp_server_socket",
        "//xplat/folly/io/async:async_udp_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "async_udp_socket_gso_gro_test",
    srcs = [
        # "AsyncUDPSocketGSOGROTest.cpp",
    ],
    contacts = ["oncall+thrift@xmail.facebook.com"],
    raw_headers = [],
    deps = [
        "fbsource//xplat/folly/io:iobuf",
        "//xplat/folly:conv",
        "//xplat/folly:network_address",
        "//xplat/folly:portability_gmock",
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:async_udp_server_socket",
        "//xplat/folly/io/async:async_udp_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "async_udp_socket_sendmmsg_test",
    srcs = ["AsyncUDPSocketSendmmsgTest.cpp"],
    contacts = ["oncall+thrift@xmail.facebook.com"],
    raw_headers = [],
    deps = [
        "fbsource//xplat/folly/io:iobuf",
        "//xplat/folly:conv",
        "//xplat/folly:network_address",
        "//xplat/folly:portability_gmock",
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:async_udp_server_socket",
        "//xplat/folly/io/async:async_udp_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "blocking_socket",
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = ["BlockingSocket.h"],
    exported_deps = [
        "//xplat/folly:optional",
        "//xplat/folly/io/async:async_socket",
        "//xplat/folly/io/async:async_ssl_socket",
        "//xplat/folly/io/async:ssl_context",
        "//xplat/folly/net:network_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "callback_state_enum",
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = ["CallbackStateEnum.h"],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "conn_callback",
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = ["ConnCallback.h"],
    exported_deps = [
        ":callback_state_enum",
        "//xplat/folly/io/async:async_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "delayed_destruction_base_test",
    srcs = ["DelayedDestructionBaseTest.cpp"],
    contacts = ["oncall+thrift@xmail.facebook.com"],
    raw_headers = [],
    deps = [
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:delayed_destruction",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "delayed_destruction_test",
    srcs = ["DelayedDestructionTest.cpp"],
    contacts = ["oncall+thrift@xmail.facebook.com"],
    raw_headers = [],
    deps = [
        "//third-party/glog:glog",
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:delayed_destruction",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "destructor_check_test",
    srcs = ["DestructorCheckTest.cpp"],
    contacts = ["oncall+thrift@xmail.facebook.com"],
    raw_headers = [],
    deps = [
        "//xplat/folly:memory",
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:destructor_check",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_binary,
    name = "event_base_benchmark",
    srcs = ["EventBaseBenchmark.cpp"],
    allocator = "malloc",
    raw_headers = [],
    deps = [
        "//xplat/folly:benchmark",
        "//xplat/folly:portability_gflags",
        "//xplat/folly/io/async:async_base",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "event_base_test_lib",
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = [
        "EventBaseTestLib.h",
    ],
    exported_deps = [
        ":util",
        "//xplat/folly:futures_core",
        "//xplat/folly:memory",
        "//xplat/folly:portability_gmock",
        "//xplat/folly:portability_stdlib",
        "//xplat/folly:portability_unistd",
        "//xplat/folly:scope_guard",
        "//xplat/folly:synchronization_baton",
        "//xplat/folly:system_thread_name",
        "//xplat/folly/io/async:async_base",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "event_base_test",
    srcs = ["EventBaseTest.cpp"],
    allocator = "malloc",
    contacts = ["oncall+thrift@xmail.facebook.com"],
    raw_headers = [],
    supports_static_listing = False,
    deps = [
        ":async_signal_handler_test_lib",
        ":event_base_test_lib",
        "//xplat/folly:init_init",
        "//xplat/folly:portability_gtest",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "event_base_local_test",
    srcs = ["EventBaseLocalTest.cpp"],
    allocator = "malloc",
    contacts = ["oncall+thrift@xmail.facebook.com"],
    raw_headers = [],
    deps = [
        "//xplat/folly:portability_gtest",
        "//xplat/folly:synchronization_baton",
        "//xplat/folly/io/async:async_base",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "event_base_thread_test",
    srcs = ["EventBaseThreadTest.cpp"],
    raw_headers = [],
    deps = [
        "//xplat/folly:portability_gtest",
        "//xplat/folly:synchronization_baton",
        "//xplat/folly:system_thread_name",
        "//xplat/folly/io/async:event_base_manager",
        "//xplat/folly/io/async:event_base_thread",
    ],
)

# Skipped because it's slow
# folly_xplat_cxx_test(
#     name = "hhwheel_timer_slow_test",
#     srcs = ["HHWheelTimerSlowTests.cpp"],
#     contacts = ["oncall+thrift@xmail.facebook.com"],
#     raw_headers = [],
#     labels = [
#         "extended",
#     ],
#     deps = [
#         ":util",
#         "//xplat/folly:portability_gtest",
#         "//xplat/folly:random",
#         "//xplat/folly/io/async:async_base",
#     ],
# )

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "hhwheel_timer_test",
    srcs = ["HHWheelTimerTest.cpp"],
    contacts = ["oncall+thrift@xmail.facebook.com"],
    raw_headers = [],
    deps = [
        ":util",
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:async_base",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "mocks",
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = [
        "MockAsyncSSLSocket.h",
        "MockAsyncSocket.h",
        "MockAsyncSocketLegacyObserver.h",
        "MockAsyncSocketObserver.h",
        "MockAsyncTransport.h",
        "MockAsyncUDPSocket.h",
        "MockTimeoutManager.h",
    ],
    deps = ["//xplat/folly/io/async:async_socket_exception"],
    exported_deps = [
        "//xplat/folly:memory",
        "//xplat/folly:portability_gmock",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:async_socket",
        "//xplat/folly/io/async:async_ssl_socket",
        "//xplat/folly/io/async:async_transport",
        "//xplat/folly/io/async:async_udp_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "mock_server_socket",
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = ["MockAsyncServerSocket.h"],
    exported_deps = [
        "//xplat/folly:portability_gmock",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:server_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "notification_queue_test",
    srcs = ["NotificationQueueTest.cpp"],
    raw_headers = [],
    deps = [
        "//xplat/folly:portability_gtest",
        "//xplat/folly:synchronization_baton",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:scoped_event_base_thread",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "atomic_notification_queue_test",
    srcs = ["AtomicNotificationQueueTest.cpp"],
    raw_headers = [],
    deps = [
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:async_base",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_binary,
    name = "notification_queue_benchmark",
    srcs = ["NotificationQueueBenchmark.cpp"],
    raw_headers = [],
    deps = [
        "//xplat/folly:benchmark",
        "//xplat/folly:synchronization_baton",
        "//xplat/folly/io/async:async_base",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "request_context_test",
    srcs = ["RequestContextTest.cpp"],
    raw_headers = ["RequestContextHelper.h"],
    deps = [
        "//third-party/boost:boost_thread",
        "//xplat/folly:memory",
        "//xplat/folly:portability_gtest",
        "//xplat/folly:system_thread_name",
        "//xplat/folly/io/async:async_base",
    ],
    exported_deps = ["//xplat/folly/io/async:request_context"],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "scoped_bound_port",
    srcs = ["ScopedBoundPort.cpp"],
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = ["ScopedBoundPort.h"],
    deps = [
        "//xplat/folly:memory",
        "//xplat/folly/io/async:scoped_event_base_thread",
        "//xplat/folly/io/async:server_socket",
    ],
    exported_deps = ["//xplat/folly:network_address"],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "scoped_event_base_thread_test",
    srcs = ["ScopedEventBaseThreadTest.cpp"],
    deps = [
        "//xplat/folly:futures_core",
        "//xplat/folly:optional",
        "//xplat/folly:portability_gtest",
        "//xplat/folly:synchronization_baton",
        "//xplat/folly:system_thread_name",
        "//xplat/folly/io/async:event_base_manager",
        "//xplat/folly/io/async:scoped_event_base_thread",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_binary,
    name = "socket_client",
    srcs = ["SocketClient.cpp"],
    raw_headers = [],
    deps = [
        ":blocking_socket",
        "//xplat/folly:exception_wrapper",
        "//xplat/folly:portability_gflags",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "ssl_session_test",
    srcs = [
        "SSLSessionTest.cpp",
    ],
    contacts = ["oncall+secure_pipes@xmail.facebook.com"],
    raw_headers = [],
    resources = {
        "certs/ca-cert.pem": "//xplat/folly/io/async/test/certs:ca-cert.pem",
        "certs/tests-cert.pem": "//xplat/folly/io/async/test/certs:tests-cert.pem",
        "certs/tests-key.pem": "//xplat/folly/io/async/test/certs:tests-key.pem",
    },
    deps = [
        ":async_ssl_socket_test_lib",
        "//xplat/folly:portability_gtest",
        "//xplat/folly:portability_openssl",
        "//xplat/folly:portability_sockets",
        "//xplat/folly/net:net_ops",
        "//xplat/folly/net:network_socket",
        "//xplat/folly/ssl:ssl_session",
        "//xplat/folly/ssl/detail:openssl_session",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "time_util_test",
    srcs = ["TimeUtilTest.cpp"],
    deps = [
        ":util",
        "//third-party/glog:glog",
        "//xplat/folly:portability_gtest",
        "//xplat/folly:portability_unistd",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "ssl_context_test",
    srcs = [
        "SSLContextTest.cpp",
    ],
    contacts = ["oncall+secure_pipes@xmail.facebook.com"],
    raw_headers = [],
    resources = {
        "certs/client_chain.pem": "//xplat/folly/io/async/test/certs:client_chain.pem",
        "certs/client_key.pem": "//xplat/folly/io/async/test/certs:client_key.pem",
        "certs/clienti_key.pem": "//xplat/folly/io/async/test/certs:clienti_key.pem",
        "certs/tests-cert.pem": "//xplat/folly/io/async/test/certs:tests-cert.pem",
        "certs/tests-key.pem": "//xplat/folly/io/async/test/certs:tests-key.pem",
    },
    deps = [
        ":ssl_util",
        "//xplat/folly:experimental_test_util",
        "//xplat/folly:file_util",
        "//xplat/folly:portability_gtest",
        "//xplat/folly:portability_openssl",
        "//xplat/folly/io/async:ssl_context",
        "//xplat/folly/ssl:openssl_cert_utils",
        "//xplat/folly/ssl:openssl_key_utils",
        "//xplat/folly/ssl:openssl_ptr_types",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "ssl_options_test",
    srcs = ["SSLOptionsTest.cpp"],
    contacts = ["oncall+secure_pipes@xmail.facebook.com"],
    raw_headers = [],
    deps = [
        ":ssl_util",
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:ssl_context",
        "//xplat/folly/io/async:ssl_options",
        "//xplat/folly/ssl:openssl_ptr_types",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "ssl_util",
    srcs = ["SSLUtil.cpp"],
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = [
        "SSLUtil.h",
    ],
    exported_deps = ["//xplat/folly/ssl:openssl_ptr_types"],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "util",
    srcs = [
        "SocketPair.cpp",
        "TimeUtil.cpp",
    ],
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = [
        "SocketPair.h",
        "TimeUtil.h",
        "UndelayedDestruction.h",
        "Util.h",
    ],
    deps = [
        "//third-party/glog:glog",
        "//xplat/folly:conv",
        "//xplat/folly:portability",
        "//xplat/folly:portability_fcntl",
        "//xplat/folly:portability_sockets",
        "//xplat/folly:portability_unistd",
        "//xplat/folly:scope_guard",
        "//xplat/folly:string",
        "//xplat/folly:system_thread_id",
        "//xplat/folly/net:net_ops",
    ],
    exported_deps = [
        "//xplat/folly:portability_gtest",
        "//xplat/folly:portability_sys_types",
        "//xplat/folly:test_test_utils",
        "//xplat/folly/net:network_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "write_chain_async_transport_wrapper_test",
    srcs = ["WriteChainAsyncTransportWrapperTest.cpp"],
    raw_headers = [],
    deps = [
        "//xplat/folly:portability_gmock",
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:async_transport",
        "//xplat/folly/io/async:decorated_async_transport_wrapper",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "write_flags_test",
    srcs = ["WriteFlagsTest.cpp"],
    raw_headers = [],
    deps = [
        "//xplat/folly:portability_gtest",
        "//xplat/folly/io/async:async_transport",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_library,
    name = "zero_copy_lib",
    srcs = ["ZeroCopy.cpp"],
    feature = triage_InfrastructureSupermoduleOptou,
    raw_headers = ["ZeroCopy.h"],
    exported_deps = [
        "fbsource//xplat/folly/io:iobuf",
        "//xplat/folly:exception_wrapper",
        "//xplat/folly:network_address",
        "//xplat/folly/io/async:async_base",
        "//xplat/folly/io/async:async_socket",
        "//xplat/folly/io/async:server_socket",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_test,
    name = "zero_copy_test",
    srcs = ["ZeroCopyTest.cpp"],
    raw_headers = [],
    deps = [
        ":zero_copy_lib",
        "//xplat/folly:portability_gtest",
    ],
)

non_fbcode_target(
    _kind = folly_xplat_cxx_binary,
    name = "zero_copy_benchmark",
    srcs = ["ZeroCopyBenchmark.cpp"],
    raw_headers = [],
    deps = [
        ":zero_copy_lib",
        "//xplat/folly:benchmark",
        "//xplat/folly:portability_gflags",
    ],
)

# !!!! fbcode/folly/io/async/test/TARGETS was merged into this file, see https://fburl.com/workplace/xl8l9yuo for more info !!!!

fbcode_target(
    _kind = alias_pem,
    pems = [
        "tests-cert.pem",
        "tests-key.pem",
        "ca-cert.pem",
        "client_cert.pem",
        "client_key.pem",
        "client_ca_cert.pem",
        "client_chain.pem",
        "clienti_key.pem",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "test_ssl_server",
    srcs = [
        "TestSSLServer.cpp",
    ],
    headers = [
        "TestSSLServer.h",
    ],
    resources = {
        "certs/ca-cert.pem": ":ca-cert.pem",
        "certs/client_ca_cert.pem": ":client_ca_cert.pem",
        "certs/client_cert.pem": ":client_cert.pem",
        "certs/client_chain.pem": ":client_chain.pem",
        "certs/client_key.pem": ":client_key.pem",
        "certs/tests-cert.pem": ":tests-cert.pem",
        "certs/tests-key.pem": ":tests-key.pem",
    },
    deps = [
        "//folly/portability:openssl",
    ],
    exported_deps = [
        ":callback_state_enum",
        "//folly:network_address",
        "//folly/io/async:async_base",
        "//folly/io/async:async_socket",
        "//folly/io/async:async_ssl_socket",
        "//folly/io/async:async_transport",
        "//folly/io/async:server_socket",
        "//folly/io/async/ssl:ssl_errors",
        "//folly/portability:gtest",
        "//folly/portability:sockets",
        "//folly/portability:unistd",
        "//folly/testing:test_util",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "tfo_util",
    srcs = [
        "TFOUtil.cpp",
    ],
    headers = [
        "TFOUtil.h",
    ],
    deps = [
        "//folly/detail:socket_fast_open",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "async_signal_handler_test_lib",
    headers = [
        "AsyncSignalHandlerTestLib.h",
    ],
    exported_deps = [
        ":util",
        "//folly/io/async:async_base",
        "//folly/io/async:async_signal_handler",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_pipe_test",
    srcs = [
        "AsyncPipeTest.cpp",
    ],
    emails = ["oncall+secure_pipes@xmail.facebook.com"],
    supports_static_listing = False,
    deps = [
        "//folly:memory",
        "//folly/io/async:async_base",
        "//folly/io/async:async_pipe",
        "//folly/portability:gtest",
        "//folly/portability:unistd",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "async_ssl_socket_test_lib",
    headers = [
        "AsyncSSLSocketTest.h",
    ],
    exported_deps = [
        ":test_ssl_server",
        "//folly:exception_wrapper",
        "//folly:network_address",
        "//folly/fibers:fiber_manager_map",
        "//folly/io:socket_option_map",
        "//folly/io/async:async_base",
        "//folly/io/async:async_socket",
        "//folly/io/async:async_ssl_socket",
        "//folly/io/async:async_transport",
        "//folly/io/async:server_socket",
        "//folly/io/async/ssl:ssl_errors",
        "//folly/portability:gmock",
        "//folly/portability:gtest",
        "//folly/portability:pthread",
        "//folly/portability:sockets",
        "//folly/portability:string",
        "//folly/portability:unistd",
        "//folly/testing:test_util",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_ssl_socket_test",
    srcs = [
        "AsyncSSLSocketTest.cpp",
        "AsyncSSLSocketTest2.cpp",
    ],
    emails = ["oncall+secure_pipes@xmail.facebook.com"],
    extract_helper_lib = False,
    labels = ["oss-broken"],
    resources = {
        "certs/ca-cert.pem": ":ca-cert.pem",
        "certs/client_ca_cert.pem": ":client_ca_cert.pem",
        "certs/client_cert.pem": ":client_cert.pem",
        "certs/client_key.pem": ":client_key.pem",
        "certs/tests-cert.pem": ":tests-cert.pem",
        "certs/tests-key.pem": ":tests-key.pem",
    },
    supports_static_listing = False,
    deps = [
        ":async_ssl_socket_test_lib",  # @manual
        ":blocking_socket",
        ":mocks",
        ":test_ssl_server",
        ":tfo_util",
        "//folly:exception_wrapper",
        "//folly:network_address",
        "//folly:string",
        "//folly/fibers:fiber_manager_map",
        "//folly/futures:core",
        "//folly/init:init",
        "//folly/io:iobuf",
        "//folly/io:socket_option_map",
        "//folly/io/async:async_base",
        "//folly/io/async:async_pipe",
        "//folly/io/async:async_socket",
        "//folly/io/async:async_ssl_socket",
        "//folly/io/async:async_transport",
        "//folly/io/async:event_base_thread",
        "//folly/io/async:scoped_event_base_thread",
        "//folly/io/async:server_socket",
        "//folly/io/async:ssl_context",
        "//folly/io/async:ssl_options",
        "//folly/io/async/ssl:basic_transport_certificate",
        "//folly/io/async/ssl:openssl_transport_certificate",
        "//folly/io/async/ssl:ssl_errors",
        "//folly/net:net_ops",
        "//folly/net:network_socket",
        "//folly/net/test:mock_net_ops_dispatcher",
        "//folly/portability:gmock",
        "//folly/portability:gtest",
        "//folly/portability:openssl",
        "//folly/portability:pthread",
        "//folly/portability:sockets",
        "//folly/portability:string",
        "//folly/portability:unistd",
        "//folly/testing:test_util",
    ],
    external_deps = [
        ("glibc", None, "dl"),
        ("openssl", None, "crypto"),
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_ssl_socket_write_test",
    srcs = [
        "AsyncSSLSocketWriteTest.cpp",
    ],
    emails = ["oncall+secure_pipes@xmail.facebook.com"],
    supports_static_listing = False,
    deps = [
        "//folly/io:iobuf",
        "//folly/io/async:async_base",
        "//folly/io/async:async_socket",
        "//folly/io/async:async_ssl_socket",
        "//folly/portability:gmock",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_socket_exception_test",
    srcs = [
        "AsyncSocketExceptionTest.cpp",
    ],
    emails = ["oncall+secure_pipes@xmail.facebook.com"],
    supports_static_listing = False,
    deps = [
        "//folly:conv",
        "//folly/io/async:async_socket_exception",
        "//folly/io/async:ssl_context",
        "//folly/io/async/ssl:ssl_errors",
        "//folly/portability:gtest",
        "//folly/portability:openssl",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_socket_observer_test",
    srcs = [
        "AsyncSocketObserverTest.cpp",
    ],
    labels = ["case-isolation-failure"],
    supports_static_listing = False,
    deps = [
        ":async_socket_test_lib",
        ":mocks",
        "//folly/portability:gmock",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "async_socket_test_lib",
    headers = [
        "AsyncSocketTest.h",
        "AsyncSocketTest2.h",
    ],
    exported_deps = [
        ":blocking_socket",
        ":callback_state_enum",
        ":conn_callback",
        "//folly/io/async:async_socket",
        "//folly/io/async:server_socket",
        "//folly/net:net_ops",
        "//folly/net:network_socket",
        "//folly/portability:sockets",
        "//folly/synchronization:rw_spin_lock",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_socket_test",
    srcs = [
        "AsyncSocketTest.cpp",
        "AsyncSocketTest2.cpp",
    ],
    labels = ["case-isolation-failure"],
    supports_static_listing = False,
    deps = [
        ":async_socket_test_lib",  # @manual
        ":blocking_socket",
        ":callback_state_enum",
        ":conn_callback",
        ":mocks",
        ":tfo_util",
        ":util",
        "//folly:exception_wrapper",
        "//folly:network_address",
        "//folly:random",
        "//folly/io:iobuf",
        "//folly/io:socket_option_map",
        "//folly/io/async:async_base",
        "//folly/io/async:async_socket",
        "//folly/io/async:scoped_event_base_thread",
        "//folly/io/async:server_socket",
        "//folly/net:net_ops",
        "//folly/net:network_socket",
        "//folly/net/test:mock_net_ops_dispatcher",
        "//folly/net/test:mock_tcpinfo_dispatcher",
        "//folly/portability:gmock",
        "//folly/portability:gtest",
        "//folly/portability:sockets",
        "//folly/portability:unistd",
        "//folly/synchronization:baton",
        "//folly/synchronization:rw_spin_lock",
        "//folly/test:socket_address_test_helper",
        "//folly/testing:test_util",
    ],
    external_deps = [
        ("glibc", None, "rt"),
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_transport_test",
    srcs = [
        "AsyncTransportTest.cpp",
    ],
    supports_static_listing = False,
    deps = [
        ":mocks",
        "//folly/io/async:async_socket",
        "//folly/io/async:async_transport",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "event_handler_test",
    srcs = [
        "EventHandlerTest.cpp",
    ],
    supports_static_listing = False,
    deps = [
        "//folly:mpmc_queue",
        "//folly:scope_guard",
        "//folly/io/async:async_base",
        "//folly/portability:gmock",
        "//folly/portability:gtest",
        "//folly/portability:sockets",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_timeout_test",
    srcs = ["AsyncTimeoutTest.cpp"],
    headers = [],
    emails = ["oncall+thrift@xmail.facebook.com"],
    deps = [
        "//folly/io/async:async_base",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_udp_socket_test",
    srcs = ["AsyncUDPSocketTest.cpp"],
    headers = [],
    emails = ["oncall+thrift@xmail.facebook.com"],
    labels = ["heavyweight"],
    supports_static_listing = False,
    deps = [
        "//folly:conv",
        "//folly:network_address",
        "//folly:string",
        "//folly/io:iobuf",
        "//folly/io:socket_option_map",
        "//folly/io/async:async_base",
        "//folly/io/async:async_udp_server_socket",
        "//folly/io/async:async_udp_socket",
        "//folly/net/test:mock_net_ops_dispatcher",
        "//folly/portability:gmock",
        "//folly/portability:gtest",
        "//folly/portability:sockets",
        "//folly/testing:test_util",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_udp_socket_gso_gro_test",
    srcs = ["AsyncUDPSocketGSOGROTest.cpp"],
    headers = [],
    emails = ["oncall+thrift@xmail.facebook.com"],
    deps = [
        "//folly:conv",
        "//folly:network_address",
        "//folly/io:iobuf",
        "//folly/io/async:async_base",
        "//folly/io/async:async_udp_server_socket",
        "//folly/io/async:async_udp_socket",
        "//folly/portability:gmock",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_udp_socket_sendmmsg_test",
    srcs = ["AsyncUDPSocketSendmmsgTest.cpp"],
    headers = [],
    emails = ["oncall+thrift@xmail.facebook.com"],
    deps = [
        "//folly:conv",
        "//folly:network_address",
        "//folly/io:iobuf",
        "//folly/io/async:async_base",
        "//folly/io/async:async_udp_server_socket",
        "//folly/io/async:async_udp_socket",
        "//folly/portability:gmock",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "decorated_async_transport_wrapper_test",
    srcs = ["DecoratedAsyncTransportWrapperTest.cpp"],
    deps = [
        "//folly/io/async:async_socket",
        "//folly/io/async:async_transport",
        "//folly/io/async:decorated_async_transport_wrapper",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "blocking_socket",
    headers = ["BlockingSocket.h"],
    exported_deps = [
        "//folly:optional",
        "//folly/io/async:async_socket",
        "//folly/io/async:async_ssl_socket",
        "//folly/io/async:ssl_context",
        "//folly/net:network_socket",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "callback_state_enum",
    headers = [
        "CallbackStateEnum.h",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "conn_callback",
    headers = [
        "ConnCallback.h",
    ],
    exported_deps = [
        ":callback_state_enum",
        "//folly/io/async:async_socket",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "delayed_destruction_base_test",
    srcs = ["DelayedDestructionBaseTest.cpp"],
    headers = [],
    emails = ["oncall+thrift@xmail.facebook.com"],
    deps = [
        "//folly/io/async:delayed_destruction",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "delayed_destruction_test",
    srcs = ["DelayedDestructionTest.cpp"],
    headers = [],
    emails = ["oncall+thrift@xmail.facebook.com"],
    deps = [
        "//folly/io/async:delayed_destruction",
        "//folly/portability:gtest",
    ],
    external_deps = [
        "glog",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "destructor_check_test",
    srcs = ["DestructorCheckTest.cpp"],
    headers = [],
    emails = ["oncall+thrift@xmail.facebook.com"],
    deps = [
        "//folly:memory",
        "//folly/io/async:destructor_check",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_binary,
    name = "event_base_benchmark",
    srcs = ["EventBaseBenchmark.cpp"],
    headers = [],
    allocator = "malloc",
    deps = [
        "//folly:benchmark",
        "//folly/io/async:async_base",
        "//folly/portability:gflags",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "event_base_test_lib",
    headers = [
        "EventBaseTestLib.h",
    ],
    exported_deps = [
        ":util",
        "//folly:math",
        "//folly:memory",
        "//folly:scope_guard",
        "//folly/futures:core",
        "//folly/io/async:async_base",
        "//folly/portability:gmock",
        "//folly/portability:stdlib",
        "//folly/portability:unistd",
        "//folly/synchronization:baton",
        "//folly/system:thread_id",
        "//folly/system:thread_name",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "event_base_test",
    srcs = ["EventBaseTest.cpp"],
    headers = [],
    allocator = "malloc",
    emails = ["oncall+thrift@xmail.facebook.com"],
    labels = [
        "heavyweight",
        "load-sensitive-timing-test",
    ],
    supports_static_listing = False,
    deps = [
        ":async_signal_handler_test_lib",
        ":event_base_test_lib",
        "//folly/init:init",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "event_base_local_test",
    srcs = ["EventBaseLocalTest.cpp"],
    headers = [],
    allocator = "malloc",
    emails = ["oncall+thrift@xmail.facebook.com"],
    deps = [
        "//folly/io/async:async_base",
        "//folly/portability:gtest",
        "//folly/synchronization:baton",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "event_base_thread_test",
    srcs = ["EventBaseThreadTest.cpp"],
    headers = [],
    deps = [
        "//folly/io/async:event_base_manager",
        "//folly/io/async:event_base_thread",
        "//folly/portability:gtest",
        "//folly/synchronization:baton",
        "//folly/system:thread_name",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "hhwheel_timer_slow_test",
    srcs = ["HHWheelTimerSlowTests.cpp"],
    headers = [],
    emails = ["oncall+thrift@xmail.facebook.com"],
    labels = [
        "extended",
        "load-sensitive-timing-test",
    ],
    deps = [
        ":util",
        "//folly:random",
        "//folly/io/async:async_base",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "hhwheel_timer_test",
    srcs = ["HHWheelTimerTest.cpp"],
    headers = [],
    emails = ["oncall+thrift@xmail.facebook.com"],
    labels = ["slow"],
    deps = [
        ":util",
        "//folly/io/async:async_base",
        "//folly/portability:gtest",
        "//folly/portability:unistd",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "mocks",
    headers = [
        "MockAsyncSSLSocket.h",
        "MockAsyncSocket.h",
        "MockAsyncSocketLegacyObserver.h",
        "MockAsyncSocketObserver.h",
        "MockAsyncTransport.h",
        "MockAsyncUDPSocket.h",
        "MockTimeoutManager.h",
    ],
    exported_deps = [
        "//folly:memory",
        "//folly/io/async:async_base",
        "//folly/io/async:async_socket",
        "//folly/io/async:async_socket_exception",
        "//folly/io/async:async_ssl_socket",
        "//folly/io/async:async_transport",
        "//folly/io/async:async_udp_socket",
        "//folly/portability:gmock",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "mock_server_socket",
    headers = ["MockAsyncServerSocket.h"],
    exported_deps = [
        "//folly/io/async:async_base",
        "//folly/io/async:server_socket",
        "//folly/portability:gmock",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "notification_queue_test",
    srcs = ["NotificationQueueTest.cpp"],
    headers = [],
    deps = [
        "//folly/io/async:async_base",
        "//folly/io/async:scoped_event_base_thread",
        "//folly/portability:gtest",
        "//folly/synchronization:baton",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "atomic_notification_queue_test",
    srcs = ["AtomicNotificationQueueTest.cpp"],
    headers = [],
    deps = [
        "//folly/io/async:async_base",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_binary,
    name = "notification_queue_benchmark",
    srcs = ["NotificationQueueBenchmark.cpp"],
    headers = [],
    deps = [
        "//folly:benchmark",
        "//folly/io/async:async_base",
        "//folly/synchronization:baton",
    ],
)

fbcode_target(
    _kind = cpp_benchmark,
    name = "request_context_benchmark",
    srcs = ["RequestContextBenchmark.cpp"],
    headers = ["RequestContextHelper.h"],
    deps = [
        "//folly:conv",
        "//folly/container:array",
        "//folly/io/async:request_context",
        "//folly/portability:gflags",
        "//folly/synchronization:relaxed_atomic",
        "//folly/synchronization/test:barrier",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "request_context_test",
    srcs = ["RequestContextTest.cpp"],
    headers = ["RequestContextHelper.h"],
    deps = [
        "fbsource//third-party/fmt:fmt",
        "//folly:memory",
        "//folly:singleton",
        "//folly/container:enumerate",
        "//folly/io/async:async_base",
        "//folly/io/async:request_context",
        "//folly/portability:gtest",
        "//folly/synchronization:relaxed_atomic",
        "//folly/system:thread_name",
    ],
    external_deps = [
        ("boost", None, "boost_thread"),
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "scoped_bound_port",
    srcs = ["ScopedBoundPort.cpp"],
    headers = ["ScopedBoundPort.h"],
    deps = [
        "//folly:memory",
        "//folly/io/async:scoped_event_base_thread",
        "//folly/io/async:server_socket",
    ],
    exported_deps = [
        "//folly:network_address",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "scoped_event_base_thread_test",
    srcs = ["ScopedEventBaseThreadTest.cpp"],
    deps = [
        "//folly:optional",
        "//folly/futures:core",
        "//folly/io/async:event_base_manager",
        "//folly/io/async:scoped_event_base_thread",
        "//folly/portability:gtest",
        "//folly/synchronization:baton",
        "//folly/system:thread_name",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "terminate_cancellation_token_test",
    srcs = ["TerminateCancellationTokenTest.cpp"],
    deps = [
        "//folly/io/async:terminate_cancellation_token",
        "//folly/portability:gtest",
        "//folly/synchronization:baton",
    ],
)

fbcode_target(
    _kind = cpp_binary,
    name = "socket_client",
    srcs = ["SocketClient.cpp"],
    headers = [],
    deps = [
        ":blocking_socket",
        "//folly:exception_wrapper",
        "//folly/portability:gflags",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "ssl_session_test",
    srcs = ["SSLSessionTest.cpp"],
    headers = [],
    emails = ["oncall+secure_pipes@xmail.facebook.com"],
    resources = {
        "certs/ca-cert.pem": ":ca-cert.pem",
        "certs/tests-cert.pem": ":tests-cert.pem",
        "certs/tests-key.pem": ":tests-key.pem",
    },
    deps = [
        ":async_ssl_socket_test_lib",
        "//folly/net:net_ops",
        "//folly/net:network_socket",
        "//folly/portability:gtest",
        "//folly/portability:openssl",
        "//folly/portability:sockets",
        "//folly/ssl:ssl_session",
        "//folly/ssl/detail:openssl_session",
        "//folly/testing:test_util",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "time_util_test",
    srcs = ["TimeUtilTest.cpp"],
    deps = [
        ":util",
        "//folly/portability:gtest",
        "//folly/portability:unistd",
    ],
    external_deps = [
        "glog",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "ssl_context_test",
    srcs = ["SSLContextTest.cpp"],
    headers = [],
    emails = ["oncall+secure_pipes@xmail.facebook.com"],
    resources = {
        "certs/client_chain.pem": ":client_chain.pem",
        "certs/client_key.pem": ":client_key.pem",
        "certs/clienti_key.pem": ":clienti_key.pem",
        "certs/tests-cert.pem": ":tests-cert.pem",
        "certs/tests-key.pem": ":tests-key.pem",
    },
    deps = [
        ":ssl_util",
        "//folly:file_util",
        "//folly/io/async:ssl_context",
        "//folly/portability:gtest",
        "//folly/portability:openssl",
        "//folly/ssl:openssl_cert_utils",
        "//folly/ssl:openssl_key_utils",
        "//folly/ssl:openssl_ptr_types",
        "//folly/testing:test_util",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "ssl_context_regression_test",
    srcs = ["SSLContextRegressionTest.cpp"],
    headers = [],
    emails = ["oncall+secure_pipes@xmail.facebook.com"],
    deps = [
        "//folly:file_util",
        "//folly/io/async:ssl_context",
        "//folly/portability:gtest",
        "//folly/testing:test_util",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "ssl_options_test",
    srcs = ["SSLOptionsTest.cpp"],
    headers = [],
    emails = ["oncall+secure_pipes@xmail.facebook.com"],
    deps = [
        ":ssl_util",
        "//folly/io/async:ssl_context",
        "//folly/io/async:ssl_options",
        "//folly/portability:gtest",
        "//folly/ssl:openssl_ptr_types",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "ssl_util",
    srcs = [
        "SSLUtil.cpp",
    ],
    headers = [
        "SSLUtil.h",
    ],
    exported_deps = [
        "//folly/ssl:openssl_ptr_types",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "timerfd_timeout_manager_test",
    srcs = ["TimerFDTimeoutManagerTest.cpp"],
    headers = [],
    labels = ["load-sensitive-timing-test"],
    deps = [
        "//folly/io/async:timerfd",
        "//folly/io/async/test:util",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "util",
    srcs = [
        "SocketPair.cpp",
        "TimeUtil.cpp",
    ],
    headers = [
        "SocketPair.h",
        "TimeUtil.h",
        "UndelayedDestruction.h",
        "Util.h",
    ],
    deps = [
        "//folly:conv",
        "//folly:portability",
        "//folly:scope_guard",
        "//folly:string",
        "//folly/net:net_ops",
        "//folly/portability:fcntl",
        "//folly/portability:sockets",
        "//folly/portability:unistd",
        "//folly/system:thread_id",
    ],
    exported_deps = [
        "//folly/net:network_socket",
        "//folly/portability:gtest",
        "//folly/portability:sys_types",
        "//folly/test:test_utils",
    ],
    external_deps = [
        "glog",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "write_chain_async_transport_wrapper_test",
    srcs = ["WriteChainAsyncTransportWrapperTest.cpp"],
    headers = [],
    deps = [
        "//folly/io/async:async_transport",
        "//folly/io/async:decorated_async_transport_wrapper",
        "//folly/portability:gmock",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "write_flags_test",
    srcs = ["WriteFlagsTest.cpp"],
    headers = [],
    deps = [
        "//folly/io/async:async_transport",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "zero_copy_lib",
    srcs = ["ZeroCopy.cpp"],
    headers = ["ZeroCopy.h"],
    exported_deps = [
        "//folly:exception_wrapper",
        "//folly:network_address",
        "//folly/io:iobuf",
        "//folly/io/async:async_base",
        "//folly/io/async:async_socket",
        "//folly/io/async:server_socket",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "zero_copy_test",
    srcs = ["ZeroCopyTest.cpp"],
    headers = [],
    deps = [
        ":zero_copy_lib",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_binary,
    name = "zero_copy_benchmark",
    srcs = ["ZeroCopyBenchmark.cpp"],
    headers = [],
    deps = [
        ":zero_copy_lib",
        "//folly:benchmark",
        "//folly/portability:gflags",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "hhwheel_timer_high_res_test",
    srcs = ["HHWheelTimerHighResTest.cpp"],
    headers = [],
    labels = ["load-sensitive-timing-test"],
    deps = [
        "//folly/io/async:async_base",
        "//folly/io/async:timerfd",
        "//folly/io/async/test:util",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_binary,
    name = "hhwheel_timer_high_res_benchmark",
    srcs = ["HHWheelTimerHighResBenchmark.cpp"],
    headers = [],
    deps = [
        "//folly:benchmark",
        "//folly/io/async:timerfd",
        "//folly/io/async/test:util",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_io_test",
    srcs = ["AsyncIOTest.cpp"],
    supports_static_listing = False,
    deps = [
        "//folly/experimental/io:async_io",
        "//folly/experimental/io/test:async_base_test_lib",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "async_io_uring_socket_test",
    srcs = ["AsyncIoUringSocketTest.cpp"],
    labels = ["heavyweight"],
    supports_static_listing = False,
    deps = [
        "//folly:file_util",
        "//folly:subprocess",
        "//folly/executors:global_executor",
        "//folly/futures:core",
        "//folly/io/async:async_base",
        "//folly/io/async:async_io_uring_socket",
        "//folly/io/async:async_socket",
        "//folly/io/async:io_uring_backend",
        "//folly/io/async:io_uring_event",
        "//folly/io/async:server_socket",
        "//folly/portability:gtest",
        "//folly/system:shell",
        "//folly/test:socket_address_test_helper",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "epoll_backend_test",
    srcs = ["EpollBackendTest.cpp"],
    labels = [
        "heavyweight",
        "load-sensitive-timing-test",
    ],
    owner = "dmm@xmail.facebook.com",
    supports_static_listing = False,
    deps = [
        "//folly/experimental/io:epoll_backend",
        "//folly/io/async/test:async_signal_handler_test_lib",
        "//folly/io/async/test:event_base_test_lib",
    ],
)

fbcode_target(
    _kind = cpp_binary,
    name = "io_benchmark",
    srcs = ["IOBenchmark.cpp"],
    headers = [],
    deps = [
        "//folly:benchmark",
        "//folly:file_util",
        "//folly/experimental/io:async_io",
        "//folly/experimental/io/test:async_base_test_lib",
        "//folly/experimental/io/test:io_test_temp_file_util_lib",
        "//folly/io/async:io_uring",
        "//folly/portability:gflags",
    ],
)

fbcode_target(
    _kind = cpp_binary,
    name = "io_uring_backend_bench",
    srcs = ["IoUringBackendBench.cpp"],
    headers = [],
    deps = [
        "//folly:benchmark",
        "//folly:file_util",
        "//folly/experimental/io:epoll_backend",
        "//folly/init:init",
        "//folly/io/async:async_base",
        "//folly/io/async:io_uring_backend",
        "//folly/io/async:scoped_event_base_thread",
        "//folly/portability:gflags",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "io_uring_backend_setup_test",
    srcs = ["IoUringBackendSetupTest.cpp"],
    owner = "kvigor@xmail.facebook.com",
    deps = [
        "//folly/io/async:io_uring_backend",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "io_uring_backend_test",
    srcs = ["IoUringBackendTest.cpp"],
    headers = [],
    labels = [
        "heavyweight",
        "load-sensitive-timing-test",
        "slow",
    ],
    owner = "dmm@xmail.facebook.com",
    supports_static_listing = False,
    deps = [
        "//folly:file_util",
        "//folly:function",
        "//folly:string",
        "//folly/experimental/io/test:io_test_temp_file_util_lib",
        "//folly/init:init",
        "//folly/io/async:async_base",
        "//folly/io/async:async_udp_server_socket",
        "//folly/io/async:async_udp_socket",
        "//folly/io/async:io_uring_backend",
        "//folly/io/async/test:async_signal_handler_test_lib",
        "//folly/io/async/test:event_base_test_lib",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "io_uring_event_base_local_test",
    srcs = ["IoUringEventBaseLocalTest.cpp"],
    owner = "dylany@xmail.facebook.com",
    deps = [
        "//folly/futures:core",
        "//folly/io/async:io_uring_backend",
        "//folly/io/async:io_uring_event_base_local",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "io_uring_event_test",
    srcs = ["IoUringEventTest.cpp"],
    owner = "dylany@xmail.facebook.com",
    supports_static_listing = False,
    deps = [
        "//folly/futures:core",
        "//folly/io/async:async_base",
        "//folly/io/async:io_uring_backend",
        "//folly/io/async:io_uring_event",
        "//folly/portability:gtest",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "io_uring_test",
    srcs = ["IoUringTest.cpp"],
    labels = ["oss-broken"],
    owner = "dmm@xmail.facebook.com",
    supports_static_listing = False,
    deps = [
        "//folly/experimental/io/test:async_base_test_lib",
        "//folly/init:init",
        "//folly/io/async:io_uring",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "io_uring_zero_copy_buffer_pool_test",
    srcs = ["IoUringZeroCopyBufferPoolTest.cpp"],
    supports_static_listing = False,
    deps = [
        "//folly/io/async:io_uring_zero_copy_buffer_pool",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "io_uring_provided_buffer_ring_test",
    srcs = ["IoUringProvidedBufferRingTest.cpp"],
    deps = [
        "//folly/io/async:io_uring_provided_buffer_ring",
    ],
)

fbcode_target(
    _kind = cpp_binary,
    name = "registered_fd_benchmark",
    srcs = ["RegisteredFdBenchmark.cpp"],
    headers = [],
    deps = [
        "//folly:benchmark",
        "//folly:file_util",
        "//folly/io/async:async_base",
        "//folly/io/async:io_uring_backend",
        "//folly/portability:gflags",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "simple_async_io_test",
    srcs = ["SimpleAsyncIOTest.cpp"],
    supports_static_listing = False,
    deps = [
        "//folly:file",
        "//folly:random",
        "//folly/coro:blocking_wait",
        "//folly/coro:collect",
        "//folly/experimental/io:simple_async_io",
        "//folly/io:iobuf",
        "//folly/portability:gtest",
        "//folly/synchronization:baton",
    ],
    external_deps = [
        "glog",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "io_test_temp_file_util_lib",
    srcs = ["IoTestTempFileUtil.cpp"],
    headers = ["IoTestTempFileUtil.h"],
    deps = [
        "//folly:file_util",
        "//folly:string",
    ],
    exported_deps = [
        "//folly/experimental/io:fs_util",
        "//folly/testing:test_util",
    ],
    exported_external_deps = [
        "glog",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "async_base_test_lib",
    srcs = ["AsyncBaseTestLib.cpp"],
    headers = ["AsyncBaseTestLib.h"],
    exported_deps = [
        "//folly:scope_guard",
        "//folly:string",
        "//folly/experimental/io:async_base",
        "//folly/experimental/io:fs_util",
        "//folly/experimental/io/test:io_test_temp_file_util_lib",
        "//folly/portability:gtest",
        "//folly/portability:sockets",
        "//folly/portability:unistd",
        "//folly/test:test_utils",
    ],
    exported_external_deps = [
        "glog",
    ],
)

fbcode_target(
    _kind = cpp_library,
    name = "mux_io_thread_pool_executor_test_lib",
    srcs = ["MuxIOThreadPoolExecutorTest.cpp"],
    link_whole = True,
    deps = [
        "//folly/executors/test:IOThreadPoolExecutorBaseTestLib",
        "//folly/experimental/io:epoll",
        "//folly/experimental/io:mux_io_thread_pool_executor",
        "//folly/portability:gtest",
        "//folly/synchronization:latch",
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "mux_io_thread_pool_executor_test_epoll",
    args = [
        "--folly_event_base_poller_backend=epoll",
        "--folly_event_base_poller_epoll_rearm_inline=false",
    ],
    supports_static_listing = False,
    deps = [
        ":mux_io_thread_pool_executor_test_lib",  # @manual
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "mux_io_thread_pool_executor_test_epoll_rearm_inline",
    args = [
        "--folly_event_base_poller_backend=epoll",
        "--folly_event_base_poller_epoll_rearm_inline=true",
    ],
    supports_static_listing = False,
    deps = [
        ":mux_io_thread_pool_executor_test_lib",  # @manual
    ],
)

fbcode_target(
    _kind = cpp_unittest,
    name = "mux_io_thread_pool_executor_test_io_uring",
    args = [
        "--folly_event_base_poller_backend=io_uring",
    ],
    supports_static_listing = False,
    deps = [
        ":mux_io_thread_pool_executor_test_lib",  # @manual
    ],
)
